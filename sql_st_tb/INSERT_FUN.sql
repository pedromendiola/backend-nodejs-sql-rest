ALTER PROCEDURE SP_I_FUN_FUNCIONARIO
@REGISTRO CHAR(14), @NOME VARCHAR(70), @TIPO VARCHAR(50), @DATAADMISSAO DATE, @VALOR NUMERIC(12,2), @NUMERO INT,
@CODIGOGERADO INT=0 OUT AS
SET NOCOUNT ON
DECLARE @NR_FUNC INT
--EFETUANDO O SELECT QUE IRÁ CONTAR O FUNCIONARIO E ATRIBUINDO NA VARIAVEL @NR_FUNC
SELECT @NR_FUNC = COUNT(FUN_CH_REGISTRO) FROM FUN_FUNCIONARIO
	WHERE FUN_CH_REGISTRO = @REGISTRO
--COMPARANDO SE O TOTAL DE FUNCIONARIO É MAIOR  QUE ZERO(OU SEJA, SE JÁ EXISTE NO BD)
IF @NR_FUNC > 0 
BEGIN
	RAISERROR('O funcionario já se encontra cadastrado no banco de dados!',15,1)
	RETURN
END

--COMPARANDO SE O VALOR É NEGATIVO
IF @VALOR <0
BEGIN
	RAISERROR('O valor de salario minimo ou por hora não pode ser negativo!',15,1)
	RETURN
END

--COMPARANDO SE O NUMERO É NEGATIVO
IF @VALOR <0
BEGIN
	RAISERROR('O número de horas trabalhadas ou de salarios minimos não pode ser negativo!',15,1)
	RETURN
END

--COMPARANDO O TAMANHO  DA STRING DOS CAMPOS REGISTRO, NOME E TIPO
IF (LEN(TRIM(@NOME)) = 0) OR (LEN(TRIM(@TIPO)) = 0) OR (LEN(TRIM(@REGISTRO)) <> 14) AND (LEN(TRIM(@REGISTRO)) <> 11)
BEGIN
	RAISERROR('O registo, nome e tipo são obrigatórios',15,1)
	RETURN
END

--VERIFICANDO O TIPO DO EMPREGADO É ACEITAVEL
IF (UPPER(@TIPO) <> UPPER('freelancer')) AND (UPPER(@TIPO) <> UPPER('mensalista'))
BEGIN
	RAISERROR('O tipo de empregado não é uma opção tente Freelancer ou Mensalista!',15,1)
	RETURN
END

INSERT INTO FUN_FUNCIONARIO (FUN_CH_REGISTRO, FUN_ST_NOME, FUN_ST_TIPO, FUN_DT_DATAADMISSAO,FUN_RE_VALOR,FUN_IN_NUMERO)
VALUES (@REGISTRO, @NOME,UPPER(@TIPO),@DATAADMISSAO,@VALOR,@NUMERO)

SET @CODIGOGERADO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL*/
PRINT @CODIGOGERADO
RETURN @CODIGOGERADO
GO

EXEC SP_I_FUN_FUNCIONARIO '33333333333334','Lucas Henrique','freelancer','2021-04-04',1150,5 

SELECT  *	FROM FUN_FUNCIONARIO


EXEC 